# This script intends to setup a run-time environment for running and building
# GTI applications.  Users are recommended to source this file before doing 
# anything else.
# This is for Linux only.

ERR=""

OS_TYPE=`uname -s`
CPU_ARCH=`uname -m`
if [ -z "${OS_TYPE}" ] || [ -z "${CPU_ARCH}" ]; then
  echo "Could not determine OS_TYPE or CPU_ARCH"
  ERR="ERROR: SourceMe.env must be sourced under a Linux shell environment"
fi
if [ -z "$ERR" ] && [ "${OS_TYPE}" != "Linux" ]; then
  echo "${OS_TYPE} is not Linux"
  ERR="ERROR: OS_TYPE ${OS_TYPE} is not supported."
fi
if [ -z "$ERR" ] && [ "${CPU_ARCH}" != "x86_64" ] && [ "${CPU_ARCH}" != "armv7l" ] && [ "${CPU_ARCH}" != "armv8" ] && [ "${CPU_ARCH}" != "aarch64" ]; then
  echo "${CPU_ARCH} is not x86_64 armv7l armv8 aarch64"
  ERR="ERROR: CPU_ARCH ${CPU_ARCH} is not supported."
fi
# aarch64 can support 32-bit code, in case anyone installed a 32-bit system on 
# an aarch64 platform, trying to detect it. 
# Build would fail if this detection does not work
if [ -z "$ERR" ] && [ "${CPU_ARCH}" = "aarch64" ] && [ -z "$(ls -d /lib/* | grep aarch64-linux)" ]; then
  if [ ! -z "$(ls -d /lib/* | grep arm-linux)" ]; then
    CPU_ARCH="armv7l"
  fi
fi

if [ -z "$ERR" ] && [ "${CPU_ARCH}" = "x86_64" ] && [ ! -d "./Lib/${OS_TYPE}/x86_64" ]; then
  echo "Could not find x86_64 libraries."
  GUESS_TARGET_ARCH="`ls -1 ./Lib/${OS_TYPE} | grep -v OpenCV | head -1 `"
  echo "Maybe you are cross compiling for \"${GUESS_TARGET_ARCH}\"?"
  TARGET_ARCH=${GUESS_TARGET_ARCH}
  echo "Please setup toolchain and source the env file for \"${TARGET_ARCH}\" with the following commands:"
  echo 
  case ${TARGET_ARCH} in
  armv7l )
    echo "pushd Build/Tools"
    echo "wget https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz"
    echo "tar xf gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz"
    echo "pushd gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin"
    echo "export PATH=\$PWD:\$PATH"
    echo "popd"
    echo "popd"
    echo "source Build/armv7l_cross.env"
    ;;
  armv8 )
    echo "pushd Build/Tools"
    echo "wget http://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/armv8l-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_armv8l-linux-gnueabihf.tar.xz"
    echo "tar xf gcc-linaro-7.3.1-2018.05-x86_64_armv8l-linux-gnueabihf.tar.xz"
    echo "pushd gcc-linaro-7.3.1-2018.05-x86_64_armv8l-linux-gnueabihf/bin/"
    echo "export PATH=\$PWD:\$PATH"
    echo "popd"
    echo "popd"
    echo "source Build/armv8_cross.env"
    ;;
  aarch64 )
    echo "pushd Build/Tools"
    echo "wget https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/aarch64-linux-gnu/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz"
    echo "tar xf aarch64-linux-gnu/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz"
    echo "pushd gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin/"
    echo "export PATH=\$PWD:\$PATH"
    echo "popd"
    echo "popd"
    echo "source Build/aarch64_cross.env"
    ;;
  * )
    echo "Some unknow method"
    ;;
  esac
  echo
  #echo "SourceMe.env stops here"
  ERR="SourceMe.env is bypassed for cross compiling"
fi

# If the OS_TYPE is Linux, we proceed assuming the Distro is debian ubuntu 
# like "Linux", supporting apt and python pip packages
if [ -z "$ERR" ]; then
  which apt-get > /dev/null
  if [ $? != 0 ]; then
    ERR="ERROR: Not using a Debian based Linux. Please setup the environment manually."
  else
    echo "Assume running a Debian like Linux distro."
  fi
fi

lsb_str=$(lsb_release -a 2>/dev/null | grep "^Description:" | grep "Ubuntu")

if [ ! -z "$lsb_str" ]; then
  UBUNTU_VER=$(echo ${lsb_str} | cut -d' ' -f3)
  UBUNTU_MAJ=$(echo ${UBUNTU_VER} | cut -d'.' -f1)
fi

if [ -z "$ERR" ]; then
  KERN_REL=`uname -r`
  if [ -z "${KERN_REL}" ] ; then
    ERR="ERROR: Could not determine KERN_REL."
  else
    echo "Setup environment for running GTI applications on ${OS_TYPE} ${CPU_ARCH} ${KERN_REL}"
  fi
fi

# Setup various path
if [ -z "$ERR" ] ; then
# gti path
if [ ! -z "$GTISDKPATH" ]; then
  if [ "$GTISDKPATH" != "$PWD" ]; then
    echo "Redefine GTISDKPATH to be $PWD"
  fi
fi
export GTISDKPATH=$PWD
echo "GTISDKPATH=${GTISDKPATH}"
#Makefile also uses GTISDKROOT but can self define
#export "GTISDKROOT=${GTISDKPATH}"

#LD_LIBRARY_PATH
if [ -z "${LD_LIBRARY_PATH}" ]; then
  export LD_LIBRARY_PATH="${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}"
else 
  if [[ ":${LD_LIBRARY_PATH}:" != *":${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}:"* ]] ; then 
    export LD_LIBRARY_PATH="${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}:${LD_LIBRARY_PATH}"
  fi
fi
if [ ! -z "$UBUNTU_MAJ" ]; then
  if [ "$UBUNTU_MAJ" -eq 16 ]; then
    #only prepared opencv library matching dependencies on ubuntu 16
    if [[ ":${LD_LIBRARY_PATH}:" != *":${GTISDKPATH}/Lib/${OS_TYPE}/OpenCV/${CPU_ARCH}:"* ]] ; then
      export LD_LIBRARY_PATH="${GTISDKPATH}/Lib/${OS_TYPE}/OpenCV/${CPU_ARCH}:${LD_LIBRARY_PATH}"
    fi
  fi
else
  #add OpenCV path if not working on Ubuntu
  if [[ ":${LD_LIBRARY_PATH}:" != *":${GTISDKPATH}/Lib/${OS_TYPE}/OpenCV/${CPU_ARCH}:"* ]] ; then
    export LD_LIBRARY_PATH="${GTISDKPATH}/Lib/${OS_TYPE}/OpenCV/${CPU_ARCH}:${LD_LIBRARY_PATH}"
  fi
fi
echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"

# Python path is not needed if OpenCV is supplied
if [ ! -z "$(echo ${PYTHONPATH})" ]; then
  echo "PYTHONPATH is not empty, PYTHONPATH=\"${PYTHONPATH}\""
  echo "Save PYTHONPATH to OLD_PYTHONPATH and override PYTHONPATH"
  OLD_PYTHONPATH="${PYTHONPATH}"
  PYTHONPATH=
  echo "OLD_PYTHONPATH=${OLD_PYTHONPATH}"
  echo "PYTHONPATH=${PYTHONPATH}"
fi

# Add Bin to path
if [[ ":${PATH}:" != *":${GTISDKPATH}/Bin/${OS_TYPE}/${CPU_ARCH}:"* ]]; then
  export PATH="${GTISDKPATH}/Bin/${OS_TYPE}/${CPU_ARCH}:$PATH"
fi
echo "PATH=${PATH}"
fi

# check GTISDK dpkg package dependevcies
if [ -z "$ERR" ]; then
dep="
 libx11-dev
 libgtk2.0-dev
 pkg-config
 libavcodec-dev
 libavformat-dev
 libswscale-dev
 libjpeg-dev
 python-numpy
 python-tk
"
if [ ! -z "${UBUNTU_MAJ}" ]; then
  if [ "$UBUNTU_MAJ" -ge 17 ]; then
    dep="${dep} libopencv-dev"
    dep="${dep} libpng-dev"
    dep="${dep} python-opencv"
  fi
  if [ "$UBUNTU_MAJ" -le 16 ]; then
    dep="${dep} libpng12-dev"
    dep="${dep} libjasper-dev"
  fi
else
  echo "Possibly working on an embedded system. Please watch out for missing packages."
fi
tobedep=""
for pkg in $dep; do
  dpkg-query -s $pkg &> /dev/null
  if [ $? != 0 ]; then
    #echo "package $pkg needed but not installed"
    tobedep="${tobedep} ${pkg}"
  #else
  #  echo "found ${pkg}"
  fi
done
if [ -z "${tobedep}" ]; then
  echo "Check dependency passed"
else
  echo "Some required packages are missing."
  echo "Please run the following commands then run \"source SourceMe.env\" again."
  echo " sudo apt update"
  echo " sudo apt install ${tobedep}"
  ERR="SourceMe.env stopped due to missing packages."
fi
fi

# check to make sure FTDI and EUSB rules are in place
# install if not
if [ -z "$ERR" ]; then
  diff -u "/etc/udev/rules.d/50-eusb.rules" "${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}/50-eusb.rules"
  if [ "$?" -eq "0" ]; then
    echo "EUSB rules are in place and up to date."
  else
    echo "EUSB rules are missing or outdated. This is needed if you are using EUSB USB dongles."
    while true; do
    read -p "Do you wish to install? [y/N] " yn
    case $yn in
      [Yy]* ) sudo cp -i ${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}/50-eusb.rules /etc/udev/rules.d/; sudo udevadm control --reload-rules; echo "Added EUSB udev rules as /etc/udev/rules.d/50-eusb.rules"; break;;
      [Nn]*|*) break;;
    esac
    done
  fi
fi
if [ -z "$ERR" ]; then
  diff -u "/etc/udev/rules.d/51-ftd3xx.rules" "${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}/51-ftd3xx.rules"
  if [ "$?" -eq "0" ]; then
    echo "FTDI rules are in place and up to date."
  else
    echo "FTDI rules are missing or outdated. This is needed if you are using FTDI USB dongles."
    while true; do
    read -p "Do you wish to install? [y/N] " yn
    case $yn in
      [Yy]* ) sudo cp -i ${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}/51-ftd3xx.rules /etc/udev/rules.d/; sudo udevadm control --reload-rules; echo "Added FTDI udev rules as /etc/udev/rules.d/51-ftd3xx.rules";  break;;
      [Nn]* | *) break;;
    esac
    done
  fi
fi
if [ -z "$ERR" ]; then
  diff -u "/etc/udev/rules.d/52-gtiusb.rules" "${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}/52-gtiusb.rules"
  if [ "$?" -eq "0" ]; then
    echo "GTI USB rules are in place and up to date."
  else
    echo "GTI USB rules are missing or outdated. This is needed if you are using native USB dongles."
    while true; do
    read -p "Do you wish to install? [y/N] " yn
    case $yn in
      [Yy]* ) sudo cp -i ${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}/52-gtiusb.rules /etc/udev/rules.d/; sudo udevadm control --reload-rules; echo "Added GTI USB udev rules as /etc/udev/rules.d/52-gtiusb.rules";  break;;
      [Nn]* | *) break;;
    esac
    done
  fi
fi
# check for pcie driver installation if on a Linux PC
if [ -z "$ERR" ] && [ "${CPU_ARCH}" = "x86_64" ]; then
  # if running on x86_64 attempt to install pcie driver
  #echo "Running on PC"
  diff -u "/etc/udev/rules.d/70-gti.rules" "${GTISDKPATH}/Lib/${OS_TYPE}/${CPU_ARCH}/70-gti.rules"
  if [ "$?" -eq "0" ] && [ ! -z "$(lsmod | grep gti_pcie_drv)" ];  then
    echo "PCIe driver is installed"
  else
    echo "PCIe driver is missing or incomplete. This is needed if you are using GTI PCIe cards such as the GAIN Board."
    while true; do
    read -p "Do you wish to install? [y/N] " yn
    case $yn in
      [Yy]* ) cd ${GTISDKPATH}/Drivers/${OS_TYPE}/pcie_drv/ && sudo make install && sudo modprobe gti_pcie_drv && cd -; echo "Installed gti_pcie_drv driver"; echo "Please reboot to make sure the PCIe driver is activated."; break;;
      [Nn]* ) break;;
      * ) break;;
    esac
    done
  fi
fi


# check python environment
if [ -z "$ERR" ]; then
  if [ `which python2` ]; then
    echo -n "Found python "
    python2 --version
  else
    echo "python 2.7 is not installed, please install python to proceed."
    ERR="ERROR: Cannot find python 2.7."
  fi
fi
if [ -z "$ERR" ]; then
  if [ `which pip` ]; then
    echo -n "Found "
    python -m pip --version
  else
    echo "pip is missing, please consider install with "
    echo " sudo apt install python-pip"
    echo "then upgrade to your desired version higher than 9.0.1:"
    echo " sudo python -m pip install --upgrade pip==9.0.1"
    echo " sudo python -m pip install setuptools"
    ERR="ERROR: Cannot find python pip"
  fi
fi
if [ -z "$ERR" ]; then
  if [ -z "`python -m pip list 2>/dev/null | grep setuptools`" ]; then
    #setuptools is essential for pip, but often the version from python-setuptools is too old
    python -m pip install --user setuptools
  fi
  if [ ! -z "`python -m pip list 2>/dev/null | grep opencv-python`" ]; then
    echo "Found pip package \"opencv-python\""
  elif [ -e "${GTISDKPATH}/Lib/${OS_TYPE}/OpenCV/${CPU_ARCH}/cv2.so" ]; then
    if [ ! -z "$UBUNTU_MAJ" ]; then
      if [ $UBUNTU_MAJ -eq 16 ]; then
        export PYTHONPATH="${GTISDKPATH}/Lib/${OS_TYPE}/OpenCV/${CPU_ARCH}"
        echo "Using opencv python at ${PYTHONPATH}"
        echo "PYTHONPATH=${PYTHONPATH}"
      fi
    else
      #add OpenCV path if not working on Ubuntu
      export PYTHONPATH="${GTISDKPATH}/Lib/${OS_TYPE}/OpenCV/${CPU_ARCH}"
      echo "PYTHONPATH=${PYTHONPATH}"
    fi
  else
    echo "Cannot find python package \"opencv-python\""
    while true; do
    read -p "Do you wish to install? [y/N] " yn
    case $yn in
      [Yy]* ) python -m pip install --user opencv-python==3.4.3.18; echo "Installed python opencv-python version 3.4.3.18"; break;;
      [Nn]* | *) echo "Python opencv package is needed by python scripts but not installed."; break;;
    esac
    done
  fi
fi
if [ -z "$ERR" ]; then
  if [ ! -z "`python -m pip list 2>/dev/null | grep gtilib`" ]; then
    echo "Found pip package \"gtilib\".  If this is not the intended version, please uninstall with:"
    echo "  python -m pip uninstall gtilib"
  else
    echo "Cannot find python package \"gtilib\""
    while true; do
    read -p "Do you wish to install? [y/N] " yn
    case $yn in
      [Yy]* ) python -m pip install --user ${GTISDKPATH}/Python/Lib/gtilib/ ; echo "Installed python gtilib"; break;;
      [Nn]* | *) echo "Python library \"gtilib\" is needed by all GTI python scripts."; echo "You cannot run python demo application without \"gtilib\"."; ERR="ERROR: Cannot find python package \"gtilib\", stop."; break;;
    esac
    done
  fi
  if [ ! -z "`python -m pip list 2>/dev/null | grep gtiClassify`" ]; then
    echo "Found pip package \"gtiClassify\" for running legacy python \"Samples\" applications."
  else
    echo "Cannot find python package \"gtiClassify\". "
    echo "gtiClassify is needed by legacy python \"Samples\" applications."
    echo "You can skip gtiClassify pakcage if you are not using legacy models."
    echo "You can install \"gtiClassify\" later by running \"python -m pip install --user Python/Lib/gtiClassify/\"."
  fi
fi


if [ ! -z "$ERR" ]; then
  echo "$ERR"
else
  echo "SourceMe.env completed successfully."
fi

